#!/usr/bin/env python
# -*- coding: utf-8 mode:python -*-#
# @(#)openstack-gmetric
#
#
# Copyright (C) 2014, GC3, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

# Sends metric data to a gmond daemon

import argparse
import os
import subprocess as sp
import sys

try:
    from keystoneclient.auth.identity import v3
    from keystoneclient import session
    from keystoneclient.v3 import client as keystone_client
except ImportError:
    pass

from novaclient import client as nova_client

class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

def run_command(cmd, debug=False):    
    if debug:
        print(str.join(" ", cmd))
    else:
        sp.call(cmd)

def memoize(f):
    memo = {}
    def helper(x):
        if f not in memo:
            memo[f] = f(x)
        return memo[f]
    return helper

@memoize
def make_session(opts):
    """Create a Keystone session"""
    auth = v3.Password(auth_url=opts.os_auth_url,
                       user_id=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       project_domain_name='default')
    sess = session.Session(auth=auth)
    return sess


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--os-username', action=EnvDefault, envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password', action=EnvDefault, envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-tenant-name', action=EnvDefault, envvar="OS_TENANT_NAME",
                        help='OpenStack administrator tenant name. If not supplied, the value of the '
                        '"OS_TENANT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url', action=EnvDefault, envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')

    # parser.add_argument('action', choices=['add', 'delete'], help="Action to perform. Can be either `add` or `delete`")
    parser.add_argument('-d', '--debug', action="store_true", help="Only show the commands that will be issued.")
    parser.add_argument('-a', '--active', action="store_true", help="Send the number of VMs in ACTIVE state")
    parser.add_argument('-e', '--error', action="store_true", help="Send the number of VMs in ERROR state")
    parser.add_argument('-b', '--building', action="store_true", help="Send the number of VMs in BUILDING state")
    parser.add_argument('-s', '--shutoff', action="store_true", help="Send the number of VMs in SHUTOFF state")
    parser.add_argument('-c', '--cores', action="store_true", help="Also send the number of vCPUs")

    parser.add_argument('-g', '--gmetric', metavar='PATH', help="Path to gmetric. Default: %(default)s", default='/usr/bin/gmetric')
    parser.add_argument('--gmetric-group', default="openstack", help="Value of option `--group` of gmetric command. Default: %(default)s")
    parser.add_argument('--gmetric-dmax', type=int, default=1200, help="Value for option `--dmax` of gmetric command. Default: %(default)s")
    parser.add_argument('--max-vms', type=int, default=1200, help="Value for option `--tmax` of gmetric command. Default: %(default)s")
    parser.add_argument('--max-vcpus', default=1200, help="Value of option `--group` of gmetric command. Default: %(default)s")
    parser.add_argument('--silent', action='store_true', default=False, help='Ignore any error.')
    parser.add_argument('--os-compute-api-version', default='1.1', choices=['1.1', '2'], help='Define compute api version to use. Please note that API version v2 assumes Keystone API version 3.')
    args = parser.parse_args()

    if args.os_compute_api_version == '1.1':
        nclient = nova_client.Client('1.1', args.os_username,
                                     args.os_password,
                                     args.os_tenant_name,
                                     args.os_auth_url)
    else:
        args.os_project_name = args.os_tenant_name
        sess = make_session(args)
        nclient = nova_client.Client('2', session=sess)
    all_vms = nclient.servers.list(search_opts={'all_tenants':True})
    flavors = { flv.id: flv for flv in nclient.flavors.list()}

    if args.os_compute_api_version != '1.1':
        try:
            # Get the total number of vcpus, if possible        
            args.max_vcpus = nclient.hypervisors.statistics().vcpus
            args.max_vms = args.max_vcpus * 24 # Sensible value, but totally made up :)
        except:
            pass
                
    
    for status in ['active', 'error', 'building', 'shutoff']:
        if not getattr(args, status):
            continue
        vms = [vm for vm in all_vms if vm.status.lower() == status]

        cmd = [args.gmetric, "-d", str(args.gmetric_dmax),
               "-x", str(args.max_vms),
               "-g", args.gmetric_group,
               "--name=VMs_%s" % status,
               "--value=%d" % len(vms),
               "--type=uint16",
               "-D", "Nr. of instances in %s state" % status.upper(),
               ]
        try:
            run_command(cmd, args.debug)
        except Exception as err:
            if args.silent:
                continue
            else:
                print("Error while running command '%s': %s" % (str.join(' ', cmd), err))
                continue

        if args.cores:
            cores = sum(flavors[vm.flavor['id']].vcpus for vm in vms)
            cmd = [args.gmetric, "-d", str(args.gmetric_dmax),
                   "-x", str(args.max_vcpus),
                   "-g", args.gmetric_group,
                   "--name=VMs_%s_ncores" % status,
                   "--value=%d" % cores,
                   "--type=uint32",
                   "-D", "Nr. of vCPUS used by instances in %s state" % status.upper(),
                   ]
            try:
                run_command(cmd, args.debug)
            except Exception as err:
                if args.silent:
                    continue
                else:
                    print("Error while running command '%s': %s" % (str.join(' ', cmd), err))
                    continue
